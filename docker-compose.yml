services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15
    container_name: aihub-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-aihub_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lLSsdflDFjFjLWSlkLKSDFlsdlksjdLKJSFjk}
      - POSTGRES_DB=${POSTGRES_DB:-aihub}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Ограничение доступа только с localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aihub_admin -d aihub"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal_network

  # Бэкенд FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aihub-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwtsupersecretkey}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    expose:
      - "4000"  # Только экспозирование порта, без проксирования наружу
    volumes:
      - ./backend:/app  # Для разработки - монтируем локальный код
    restart: unless-stopped
    networks:
      - internal_network

  # Фронтенд Vue3 + Vite
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=/api
    container_name: aihub-frontend
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
      - VITE_APP_NAME=${VITE_APP_NAME:-AIHub}
    expose:
      - "80"  # Только экспозирование порта, без проксирования наружу
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - internal_network

  # Выделенный Nginx сервис
  nginx:
    image: nginx:stable-alpine
    container_name: aihub-nginx
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - internal_network
      - web_network

# Тома для хранения данных
volumes:
  postgres_data:
  frontend_static:
    driver: local

# Сети
networks:
  internal_network:
    driver: bridge  # Изменено с internal: true, чтобы обеспечить связность
  web_network:
    driver: bridge